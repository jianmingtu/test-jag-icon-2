# This is the main workflow that creates a new image and push to Openshift image stream which in turn triggers the deployment

name: Main - Build Image and Push to Openshift Registry for Dev Deployment

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      app1:
        description: 'App Name (jag-icon2-common)'    
        required: true
        default: 'jag-icon2-common'
      app2:
        description: 'App Name (jag-icon2-auth)'    
        required: true
        default: 'jag-icon2-auth'
      app3:
        description: 'App Name (jag-icon2-biometrics)'    
        required: true
        default: 'jag-icon2-biometrics'
      app4:
        description: 'App Name (jag-icon2-myfiles)'    
        required: true
        default: 'jag-icon2-myfiles'
      app5:
        description: 'App Name (jag-icon2-hsr)'    
        required: true
        default: 'jag-icon2-hsr'
      env:
        type: choice
        description: Image Target environment
        options: 
        - dev
        required: true
        default: 'dev'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-push-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    environment: ${{ github.event.inputs.env }}
    env:
      BASIC_AUTH_USER: ${{ secrets.BASIC_AUTH_USER }}
      BASIC_AUTH_PASS: ${{ secrets.BASIC_AUTH_PASS }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Git Checkout
        uses: actions/checkout@v3
      
      # Get the version number which is prefixed with the Github release branches in format release/{version}
      - name: Get Release Version
        run: |
          branch=${GITHUB_REF##*/}
          version=$(echo $branch | cut -d "/" -f2-)
          echo "releaseVersion=$version" >> $GITHUB_ENV
      
      # Get Git latest short Sha# from the release branch used. This Sha# will be used in image tagging as well as DC Pod labelling.
      - name: Get git commit short sha
        id: sha
        run: |
          shortSha=$(echo $(git rev-parse --short HEAD) | cut -c1-7)
          echo "gitsha=$shortSha" >> $GITHUB_ENV
      
      # Prints vital release paramters used
      - name: Print Release Variables
        run: |
          echo "Release Application 1: ${{ github.event.inputs.app1 }}"
          echo "Release Application 2: ${{ github.event.inputs.app2 }}"
          echo "Release Application 3: ${{ github.event.inputs.app3 }}"
          echo "Release Application 4: ${{ github.event.inputs.app4 }}"
          echo "Release Application 5: ${{ github.event.inputs.app5 }}"
          echo "Release Environment: ${{ github.event.inputs.env }}"
          echo "Release Version: ${{ env.releaseVersion }}"
          echo "Release Git Sha: ${{env.gitsha}}"

      # Set up JDK build environment
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
        
      # Runs build steps
      - name: Maven Package
        run: mvn -ntp clean package
        
      - name: Maven Verify
        run: mvn -ntp clean verify
      
      - name: Maven Spotless Check
        run: mvn -ntp spotless:check

      #Build image jag-icon2-common
      - name: Build image jag-icon2-common
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./jag-icon2-common-application
        run: |
          docker build -t ${{github.event.inputs.app1}}:${{env.gitsha}} ${CONTEXT}
      
      #Build image jag-icon2-auth
      - name: Build image jag-icon2-auth
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./jag-icon2-auth-application
        run: |
          docker build -t ${{github.event.inputs.app2}}:${{env.gitsha}} ${CONTEXT}
      
      #Build image jag-icon2-biometrics
      - name: Build image jag-icon2-biometrics
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./jag-icon2-biometrics-application
        run: |
          docker build -t ${{github.event.inputs.app3}}:${{env.gitsha}} ${CONTEXT}
      
      #Build image jag-icon2-myfiles
      - name: Build image jag-icon2-myfiles
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./jag-icon2-myfiles-application
        run: |
          docker build -t ${{github.event.inputs.app4}}:${{env.gitsha}} ${CONTEXT}
      
      #Build image jag-icon2-hsr
      - name: Build image jag-icon2-hsr
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          CONTEXT: ./jag-icon2-hsr-application
        run: |
          docker build -t ${{github.event.inputs.app5}}:${{env.gitsha}} ${CONTEXT}

      #Login to OpenShift Container Repository - Kamloops (OC GOLD)
      - name: Login to OpenShift Container Repository - Kamloops (OC GOLD)
        uses: docker/login-action@v2
        with:
          registry: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}
          username: ${{secrets.OPENSHIFT_SA_USERNAME}}
          password: ${{secrets.OPENSHIFT_SA_PASSWORD}}
      
      #Login to Openshift using OC SA and Token of respective env. for Pod labelling - Kamloops (OC GOLD)
      - name: Authenticate OC Env Specific SA - Kamloops (OC GOLD)
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_Env_DEPLOYER_NAME}}
        with:
          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL}}
          openshift_token: ${{secrets.OPENSHIFT_SA_ENV_DEPLOYER_TOKEN}}
          namespace: ${OPENSHIFT_NAMESPACE}

      #Push image jag-icon2-common to OpenShift Image stream - Kamloops (OC GOLD)
      - name: Push Image jag-icon2-common to Openshift Image Stream - Kamloops (OC GOLD)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app1}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app1}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      # Labels the deployment config of the application jag-icon2-common with release version number to spin up the pods labelled in same version - Kamloops (OC GOLD)
      - name: Labelling DC of jag-icon2-common to release version - Kamloops (OC GOLD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app1}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
      
      # Wait to DC rollout of jag-icon2-common to get completed before proceeding next stage - Kamloops (OC GOLD)
      - name: Wait for DC rollout of jag-icon2-common - Kamloops (OC GOLD)
        env:
          appName: ${{github.event.inputs.app1}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
      
      #Push image jag-icon2-auth to OpenShift Image stream - Kamloops (OC GOLD)
      - name: Push Image jag-icon2-auth to Openshift Image Stream - Kamloops (OC GOLD)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app2}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app2}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      # Labels the deployment config of the application jag-icon2-auth with release version number to spin up the pods labelled in same version - Kamloops (OC GOLD)
      - name: Labelling DC of jag-icon2-auth to release version - Kamloops (OC GOLD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app2}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
      
      # Wait to DC rollout of jag-icon2-auth to get completed before proceeding next stage - Kamloops (OC GOLD)
      - name: Wait for DC rollout of jag-icon2-auth - Kamloops (OC GOLD)
        env:
          appName: ${{github.event.inputs.app2}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
      
      #Push image jag-icon2-biometrics to OpenShift Image stream - Kamloops (OC GOLD)
      - name: Push Image jag-icon2-biometrics to Openshift Image Stream - Kamloops (OC GOLD)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app3}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app3}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      # Labels the deployment config of the application jag-icon2-biometrics with release version number to spin up the pods labelled in same version - Kamloops (OC GOLD)
      - name: Labelling DC of jag-icon2-biometrics to release version - Kamloops (OC GOLD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app3}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
      
      # Wait to DC rollout of jag-icon2-biometrics to get completed before proceeding next stage - Kamloops (OC GOLD)
      - name: Wait for DC rollout of jag-icon2-biometrics - Kamloops (OC GOLD)
        env:
          appName: ${{github.event.inputs.app3}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
      
      #Push image jag-icon2-myfiles to OpenShift Image stream - Kamloops (OC GOLD)
      - name: Push Image jag-icon2-myfiles to Openshift Image Stream - Kamloops (OC GOLD)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app4}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app4}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      # Labels the deployment config of the application jag-icon2-myfiles with release version number to spin up the pods labelled in same version - Kamloops (OC GOLD)
      - name: Labelling DC of jag-icon2-myfiles to release version - Kamloops (OC GOLD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app4}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
      
      # Wait to DC rollout of jag-icon2-myfiles to get completed before proceeding next stage - Kamloops (OC GOLD)
      - name: Wait for DC rollout of jag-icon2-myfiles - Kamloops (OC GOLD)
        env:
          appName: ${{github.event.inputs.app4}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
      
      #Push image jag-icon2-hsr to OpenShift Image stream - Kamloops (OC GOLD)
      - name: Push Image jag-icon2-hsr to Openshift Image Stream - Kamloops (OC GOLD)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app5}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app5}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      # Labels the deployment config of the application jag-icon2-hsr with release version number to spin up the pods labelled in same version - Kamloops (OC GOLD)
      - name: Labelling DC of jag-icon2-hsr to release version - Kamloops (OC GOLD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app5}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
      
      # Wait to DC rollout of jag-icon2-hsr to get completed before proceeding next stage - Kamloops (OC GOLD)
      - name: Wait for DC rollout of jag-icon2-hsr - Kamloops (OC GOLD)
        env:
          appName: ${{github.event.inputs.app5}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
      
      #Login to OpenShift Container Repository - Calgary (OC GOLDDR)
      - name: Login to OpenShift Container Repository - Calgary (OC GOLDDR)
        uses: docker/login-action@v2
        with:
          registry: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}
          username: ${{secrets.OPENSHIFT_SA_USERNAME}}
          password: ${{secrets.OPENSHIFT_SA_PASSWORD_DR}}
      
      #Login to Openshift using OC SA and Token of respective env. for Pod labelling - Calgary (OC GOLDDR)
      - name: Authenticate OC Env Specific SA - Calgary (OC GOLDDR)
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_Env_DEPLOYER_NAME}}
        with:
          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL_DR}}
          openshift_token: ${{secrets.OPENSHIFT_SA_ENV_DEPLOYER_TOKEN_DR}}
          namespace: ${OPENSHIFT_NAMESPACE}

      #Push image jag-icon2-common to OpenShift Image stream - Calgary (OC GOLDDR)
      - name: Push Image jag-icon2-common to Openshift Image Stream - Calgary (OC GOLDDR)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app1}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app1}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      # Labels the deployment config of the application jag-icon2-common with release version number to spin up the pods labelled in same version - Calgary (OC GOLDDR)
      - name: Labelling DC of jag-icon2-common to release version - Calgary (OC GOLDDR)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app1}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
      
      # Wait to DC rollout of jag-icon2-common to get completed before proceeding next stage - Calgary (OC GOLDDR)
      - name: Wait for DC rollout of jag-icon2-common - Calgary (OC GOLDDR)
        env:
          appName: ${{github.event.inputs.app1}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
      
      #Push image jag-icon2-auth to OpenShift Image stream - Calgary (OC GOLDDR)
      - name: Push Image jag-icon2-auth to Openshift Image Stream - Calgary (OC GOLDDR)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app2}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app2}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      # Labels the deployment config of the application jag-icon2-auth with release version number to spin up the pods labelled in same version - Calgary (OC GOLDDR)
      - name: Labelling DC of jag-icon2-auth to release version - Calgary (OC GOLDDR)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app2}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
      
      # Wait to DC rollout of jag-icon2-auth to get completed before proceeding next stage - Calgary (OC GOLDDR)
      - name: Wait for DC rollout of jag-icon2-auth - Calgary (OC GOLDDR)
        env:
          appName: ${{github.event.inputs.app2}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
      
      #Push image jag-icon2-biometrics to OpenShift Image stream - Calgary (OC GOLDDR)
      - name: Push Image jag-icon2-biometrics to Openshift Image Stream - Calgary (OC GOLDDR)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app3}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app3}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      # Labels the deployment config of the application jag-icon2-biometrics with release version number to spin up the pods labelled in same version - Calgary (OC GOLDDR)
      - name: Labelling DC of jag-icon2-biometrics to release version - Calgary (OC GOLDDR)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app3}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
      
      # Wait to DC rollout of jag-icon2-biometrics to get completed before proceeding next stage - Calgary (OC GOLDDR)
      - name: Wait for DC rollout of jag-icon2-biometrics - Calgary (OC GOLDDR)
        env:
          appName: ${{github.event.inputs.app3}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
      
      #Push image jag-icon2-myfiles to OpenShift Image stream - Calgary (OC GOLDDR)
      - name: Push Image jag-icon2-myfiles to Openshift Image Stream - Calgary (OC GOLDDR)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app4}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app4}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      # Labels the deployment config of the application jag-icon2-myfiles with release version number to spin up the pods labelled in same version - Calgary (OC GOLDDR)
      - name: Labelling DC of jag-icon2-myfiles to release version - Calgary (OC GOLDDR)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app4}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
      
      # Wait to DC rollout of jag-icon2-myfiles to get completed before proceeding next stage - Calgary (OC GOLDDR)
      - name: Wait for DC rollout of jag-icon2-myfiles - Calgary (OC GOLDDR)
        env:
          appName: ${{github.event.inputs.app4}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
      
      #Push image jag-icon2-hsr to OpenShift Image stream - Calgary (OC GOLDDR)
      - name: Push Image jag-icon2-hsr to Openshift Image Stream - Calgary (OC GOLDDR)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app5}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app5}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      # Labels the deployment config of the application jag-icon2-hsr with release version number to spin up the pods labelled in same version - Calgary (OC GOLDDR)
      - name: Labelling DC of jag-icon2-hsr to release version - Calgary (OC GOLDDR)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app5}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
      
      # Wait to DC rollout of jag-icon2-hsr to get completed before proceeding next stage - Calgary (OC GOLDDR)
      - name: Wait for DC rollout of jag-icon2-hsr - Calgary (OC GOLDDR)
        env:
          appName: ${{github.event.inputs.app5}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch

      - name: Run Integration Tests
        env:
          TEST_STARTER_URL: ${{secrets.TEST_STARTER_URL}}
          BASIC_AUTH_USER: ${{secrets.BASIC_AUTH_USER}}
          BASIC_AUTH_PASS: ${{secrets.BASIC_AUTH_PASS}}
        run: |
          RET=`curl --write-out '%{content_type}' --output TestErrors.zip --request GET --user ${BASIC_AUTH_USER}:${BASIC_AUTH_PASS} --url ${TEST_STARTER_URL}`
          if [ "$RET" = "application/zip" ]; then
          echo "Status: Failed Integration Test(s) found!"
          exit 1
          fi
          if [[ "$RET" == *"json"* ]]; then
          echo "Status: All Tests Passed"
          fi
          if [ "$RET" != "application/zip" ] && [[ "$RET" != *"json"* ]]; then
          echo "Received content_type is $RET, was expecting json or zip"
          exit 1
          fi

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3.1.1
        if: failure()
        with:
          name: integration-tests-report
          path: |
            TestErrors.zip
          retention-days: 5
